{"version":3,"sources":["reducers.js","components/Header.js","components/SearchBox.js","components/ErrorBoundary.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Header","nextProps","nextState","className","Component","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","this","setState","props","children","Card","name","email","id","src","alt","CardList","map","user","i","key","Scroll","style","overflowY","border","height","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.582688ec.chunk.js","sourcesContent":["import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n            // return { ...state, {searchField: action.payload} };\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {isPending: false, robots: action.payload});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {isPending: false, error: action.payload});\r\n        default:\r\n            return state;\r\n    };\r\n};","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    };\r\n\r\n    render() {\r\n        return <h1 className='f1'>RoboFriends</h1>;\r\n    };\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange}) => {\r\n    return (\r\n        <div className='pa3'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        } \r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Error. Cannot Compute</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='Robots' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    // Test if error boundary works\r\n    // if (true) {throw new Error('Skene')};\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={robots[i].id}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\n// import { robots } from './robots';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    };\r\n};\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    };\r\n\r\n    render() {\r\n        const { searchField, isPending, robots, onSearchChange } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?\r\n            <h1 className='tc'>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { searchRobots, requestRobots } from './reducers'\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));"],"sourceRoot":""}