{"version":3,"sources":["reducers.js","components/Header.js","components/CountButton.js","components/SearchBox.tsx","components/ErrorBoundary.js","components/Card.tsx","components/CardList.tsx","components/Scroll.tsx","components/MainPage.js","containers/App.tsx","actions.js","constants.js","serviceWorker.ts","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Header","nextProps","nextState","className","Component","CountButton","updateCount","setState","state","count","this","id","colour","props","onClick","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundary","hasError","children","Card","name","email","src","alt","CardList","map","user","i","key","Scroll","style","overflowY","border","height","MainPage","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6c8a58e1.chunk.js","sourcesContent":["import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n            // return { ...state, {searchField: action.payload} };\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {isPending: false, robots: action.payload});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {isPending: false, error: action.payload});\r\n        default:\r\n            return state;\r\n    };\r\n};","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    };\r\n\r\n    render() {\r\n        return <h1 className='f1'>RoboFriends</h1>;\r\n    };\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass CountButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        };\r\n    };\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        };\r\n    };\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1};\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                id='counter'\r\n                colour={this.props.colour}\r\n                onClick={this.updateCount}\r\n            >\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    };\r\n};\r\n\r\nexport default CountButton;","import React from 'react';\r\n\r\ninterface ISearchBoxProps {\r\n    searchChange(event:React.SyntheticEvent<HTMLInputElement>):void\r\n};\r\n\r\nconst SearchBox = ({ searchChange }:ISearchBoxProps) => {\r\n    return (\r\n        <div className='pa3'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                aria-label='Search Robots'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        } \r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Error. Cannot Compute</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\ninterface CardStatelessProps {\r\n    id:string,\r\n    name:string,\r\n    email:string\r\n}\r\n\r\nconst Card:React.SFC<CardStatelessProps> = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='Robots' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport { IRobot } from '../containers/App';\r\n\r\nconst CardList = ({ robots }:{robots:Array<IRobot>}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={robots[i].id}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\ntype IScrollProps = {\r\n    children?:JSX.Element\r\n};\r\n\r\nconst Scroll = (props:IScrollProps) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component} from 'react';\r\nimport Header from './Header';\r\nimport CountButton from './CountButton';\r\nimport SearchBox from './SearchBox';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport CardList from './CardList';\r\nimport Scroll from './Scroll';\r\n// import { robots } from './robots';\r\nimport './MainPage.css';\r\n\r\nclass MainPage extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    };\r\n\r\n    filterRobots = () => {\r\n        return this.props.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { isPending, robots, onSearchChange } = this.props;\r\n\r\n        return isPending ?\r\n            <h1 className='tc'>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <Header />\r\n                <CountButton />\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={this.filterRobots()}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default MainPage;","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport MainPage from '../components/MainPage';\r\nimport './App.css';\r\n\r\nexport interface IRobot {\r\n    id:string,\r\n    name:string,\r\n    email:string\r\n};\r\n\r\ninterface IAppProps {};\r\n\r\ninterface IAppState {\r\n    robots:Array<IRobot>,\r\n    searchField:string\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    };\r\n};\r\n\r\nclass App extends Component<IAppProps, IAppState> {\r\n    render() {\r\n        return <MainPage {...this.props} />;\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { searchRobots, requestRobots } from './reducers'\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}